% Created by Joey Hammond and Colton Hook
% Function coding by Chris Larking, Christian Fuller, Miles Grove, Max McDermott
%
% This code and function sets evaluates a given mission concept and finds
% the optimal mass breakdown and maximum payload operational radius to
% maximize mission success. Success percentile and mass breakdown of
% optimal system is returned

%% Future work

% Develop radiator sizing models                                            Mon 3/1

% Ryan:
%   - Find margins and factors for all systems                              Mon 3/1
%   - Add any mass, power draws, and volume additions from SMAP             Mon 3/1
%   - Run sensitivity studies, determine mission concept                    Fri 3/6

% Delageted Work:
%   - Orbits: Expand (and fix) lambert factor model (Joey oversees)         Fri 3/6
%             Expand gravity assist data processing model (Colton oversees) Fri 3/6
%   - Power: Create new power functions/options (Ryan)                      Mon 3/1
%   - Propulsion: Create better structure, volume, etc. (Ryan)              Mon 3/1 
%                 Catolog all options (Ryan)                                Mon 3/1
%                 Get better preposition costs (Ryan)                       Mon 3/1
%                 Get better Xenon density
%   - GNC: Get better funciton of flyby velocity (Ryan)                     Mon 3/1







% Consider coms power draw (distance traveled and what power draw is)

% Annotate everything
% Check line by line prop system
% Check everything in output window (especially preposition chem mass



% Big assumptions rn
% preposition_DV1,preposition_DV2,V_max,LV_mass_capacity, megarosa mass, radiator mass and
% power dissipation, everything is BOL




% Annotate
% Sensitivity studies
    % variations in mass (mass to ISO)
    % variations in mass (jetisoned mass)
    % launch vehicle prepositioning costs
    % preposition cost (DV1)
    % course corrections (DV2)
    % variation in flyby velocity
    % 1 XR100 vs 2XR 100 (vs 1.5, 2.5, 3)
    % margins on chem and eprop saving







%% Inputs



clearvars -except maindata
clc
close all

%input orbit data, include numbers and rendevous location for non-instantanous factor
orbitname = 'Orb_1.0x1.15AU_10AULim'; % (From Orbits team)
orbit = [1,1.15]; %AU (From Orbits team)
preposition_DV1 = 3000; %m/s   ---> launch vehicle (From Orbits team)
preposition_DV2 = 300; %m/s    ---> burn 1 (From Orbits team)
V_max = 10; %Allowable tank volume
LV_mass_capacity = 1; % Fraction of carried launch vehicle mass to capacity (User input)
flyby_velocity_p = [0,0,10]; % [a,b,c] where flyby velocity (km/s) = ax^2 + bx + c where x is reciprocal of heliocentric range in 1/AU


% Mass, power, and volume allocations per stage external to prop systems
%Payload and arrival burn
mass_payload = 600 + 600; %Payload mass including solar panels and radiators, kg (From SPaM)
power_payload = 500; %Power required on payload, W (From SPaM)
sp_nominal_payload = 300000*.775; % BOL Power generation from solar panels at 1 AU, W
radiator_payload = 0; %BOL Power dissapation from radiators, W
heat_payload = 0; %Heat generated by payload that must be dissapated
yr_payload = 0; %Age of radiators and solar panels at this stage
SMAP_payload = [mass_payload,power_payload,sp_nominal_payload,radiator_payload,heat_payload,yr_payload];

%Departure burn
mass_departure = 1000; %Mass including solar panels and radiators, kg (From SPaM)
power_departure = 0; %Power required, W (From SPaM)
sp_nominal_departure = 0; %BOL Power generation from solar panels at 1 AU, W
radiator_departure = 100000; %BOL Power dissapation from radiators, W
heat_departure = 0; %Heat generated by payload that must be dissapated
yr_departure = 0; %Age of radiators and solar panels at this stage
SMAP_departure = [mass_departure,power_departure,sp_nominal_departure,radiator_departure,heat_departure,yr_departure];

SMAP = [SMAP_payload;SMAP_departure];



R_max = [5, 5]; %Range of heliocentric rendevous design pts, AU (User input)
m_break = [.2,.7]; %Range of mass breakdown (propmass of departure stage/propmass of arrival and departure stages) (User input)
numR2 = 3; % Simulation size (User input)
numMass = 3; % Simulation size (User input)

% prop = [8];
%                   1 - 0 for chemprop (and impulsive) || Thrust for eprop (and non-impulsive), [N]
%                   2 - Thruster dry mass (excluding tank), [kg]
%                   3 - Isp, [s]
%                   4 - Power required, [W]
%                   5 - System Volume (excluding tank), [m^3]
%                   6 - Mixing Ratio (inf for eprop)[O/F]
%                   7 - Oxidizer Density [kg/m^3]
%                   8 - Fuel Density (inf for eprop)[kg/m^3]
%                   9 - Waste Heat from power conversion (.225/.775 times Power required) and thruster heating (function of thruster) [W]

XR100 =   [5,  250, 5000, 100000,0,inf,1000,inf,(100000*.225/.775 + 20000)]; % XR-100 systems (GUESS IS 1000kg/m^3!!)
XR100_2 = [10, 500, 5000, 200000,0,inf,1000,inf,(200000*.225/.775 + 40000)]; %2 XR-100 systems (GUESS IS 1000kg/m^3!!)
% R4D = [0, 3.63, 312, 46]; % 1 R4D system
R4D_4 = [0, 25, 312, 0, 0, 1.65, 1440, 880,0]; % 1 R4D system


% prop_scheme = [departure_DV; arrival_DV]
prop_scheme = [XR100_2;R4D_4];



%% Current Assumptions (function assumptions not included)

% ----- Preposition -----
% Flight vehicle is Falcon Heavy Expendable
% Flight vehicle uses preposition_DV1
% Mission only viable at end of preposition process
% Max out launch vehicle mass
% No power draw

% -----  Departure  -----
% Solar panel at BOL throughout analysis
% Solar panels unnafected by transfer (AU >= .8)
% Solar panels sized to apogee
% 1 burn

% -----   Arrival   -----
% 1 burn
% No power draw

% -----    Misc     -----
% Standard units: km, yr
% No trajectory adjustment or orbital maintanence burns
% No gravity assists
% Non-instantaneous burns modeled as instantaneous calculated under a safety factor
% Electrical system loss of .775
% Solar panels specific power at 1AU is 120 W/kg
% 5% of electrical fuel is saved as margin
% 2% of chemical fuel is saved as margin

%% Create Propulsion Systems

% PLACEHOLDER - Find factors of amplification on non-instantaneous lambert solution
[p1,p2] = NonInstantaneousLambert(orbitname);

% Find mass in launch vehicle
[m1,~] = launchvehicle(preposition_DV1);

% Find mass in preopositioned orbit
preposition_system = prop_scheme(1,:);
R1 = orbit(1);

% [mass_array2,P_nom, ~, V2] = prop_sizing_preposition(m1*LV_mass_capacity, R1, preposition_DV2, preposition_system,SMAP);
% m2 = mass_array2(1);


% Simulate a variety of proposed systems
[DV1, DV2, DT, V, R2, m_break, m_array] = propsystemsim(m1, mass_payload, power_payload, preposition_DV2, prop_scheme, R1, SMAP, R_max,m_break,numR2,numMass);
V_total = V/V_max;
disp('Propulsion systems generated!')
disp(' ')
%% Evaluate Prop System Success Rate
% Determine success rate of each proposed system
maindata{2,12} = 0;
if ~isstruct(maindata{1,12})
    disp('Orbit Data Load Required...')
    tic
    maindata = LoadWholeOrbit(orbitname,12); %load in data to matlab once **If iteration used, comment this line, make sure data loaded before while loop**
    disp('Orbit Data Load Complete!')
    disp('Time to Load (s):')
    t = toc;
    disp(num2str(t))
    disp(' ')
end
PosNum = 0; %set to zero means check every orbit position
PercentCoverage = zeros(numR2,numMass); %preallocate coverage matrix



% tic 

for ii = 1:size(DV1,1)
    for jj = 1:size(DV1,2)
        Vsys = V_total(ii,jj);
        DV1sys = DV1(ii,jj); %pull single DV1 for system to check
        DV2sys = DV2(ii,jj); %pull single DV2 for system to check
        tburn = DT(ii,jj); %pull single tburn1 for system to check
        R2sys = R2(ii);      %pull single R2 for system to check (should this be ii or jj?)
        mass_sys = [m_array(:,ii,jj)];
        
        tic
        SuccessList = CheckSystem2(orbitname,PosNum,Vsys,DV1sys,DV2sys,preposition_DV2,tburn,mass_sys,R2sys,p1,p2,flyby_velocity_p,maindata,prop_scheme); %produce list of successful ISOs
        PercentCoverage_sys = MixOrbitPositions(SuccessList,SuccessList); %check 2 spacecraft in the same orbit
        [PercentCoverage(ii,jj),~] = BestCombo(PercentCoverage_sys); %checks each spacing for best average coverage, not currently saving spacing value.
        
        
        if ii == 1 && jj == 1
%             fprintf("0%%\n") %indicate loop start
            t_est = toc;
            fprintf("%.1f s Estimated Runtime, %.2f s/system\n",t_est*(numR2*numMass),t_est) %display time taken
            tic
        end
    end
    fprintf("%.1f%%\n",100 * ii/size(DV1,1)) %note progress
end

 t_taken = toc;
 t_taken = t_taken + t_est;
 fprintf("%.1f s Total Runtime Runtime, %.2f s/system\n",t_taken,t_taken/(numR2*numMass)) %display time taken

%% Display Results
results2(PercentCoverage,preposition_DV1,preposition_DV2,V,DV1,DV2,m_array,R2,m_break)


