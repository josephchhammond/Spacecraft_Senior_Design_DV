function [DV1, DV2, DT, V, R2, m_break, m_array] = propsystemsim(m_total, preposition_DV, prop_scheme, R1, SMAP, R_max,m_break,numR2,numMass)
% This function calculates an array of potential propulsion system concepts
% and returns their associated propulsive behaviors
%
% Inputs:
%   m_total = mass of entire vehicle, [kg]
%   mass_payload = mass of final payload, [kg]
%   power_payload = power required by payload, [W]
%   preposition_DV = Delta V Required for prepositioning
%   prop_scheme = array of propulsion parameters
%           Rows:
%                   1 - Departure burn
%                   2 - Arrival burn
%           Columns:
%                   1 - 0 for chemprop (and impulsive) || Thrust for eprop (and non-impulsive), [N]
%                   2 - Thruster dry mass (excluding tank), [kg]
%                   3 - Isp, [s]
%                   4 - Power required, [W]
%                   5 - System Volume (excluding tank), [m^3]
%                   6 - Mixing Ratio (inf for eprop)[O/F]
%                   7 - Oxidizer Density [kg/m^3]
%                   8 - Fuel Density (inf for eprop)[kg/m^3]
%                   9 - Waste Heat from power conversion (.225/.775 times Power required) and thruster heating (function of thruster) [W]
%                   10 - Fuel dump Isp, [s]
%   R1 = heliocentric range at departure design point, Au
%   SMAP = array of SMAP Parameters
%           Rows:
%                   1 - ISO Rendevous
%                   2 - Preposition and Departure Phase
%           Columns:
%                   1 - Mass including solar panels and radiators, [kg]
%                   2 - Power required, W
%                   3 - BOL Power generation from solar panels at 1 AU, W
%                   4 - BOL Power dissapation from radiators, W
%                   5 - Heat generated by payload that must be dissapated
%                   6 - Age of radiators and solar panels at this stage
%   R_max = minimum and maximum design points for payload operation radius design point, Au
%   m_break = minimum and maximum design points for % of propellant mass under eprop
%   numR2 = number of orbital radius data points
%   numMass = number of mass data points
%
% Outputs:
% Arrays in nxn format with R varied in the 1st dimension and m_breakdown
% varied in the 2nd dimension
%   DV1 = departure burn capability of system, km/s
%   DV2 = arrival burn capability of system, km/s
%   DT = burn time for departure burn, s
%   V = volume of propellant on system
%
% Arrays are 1xn
%   R2 = heliocentric range for payload design point, Au
%   m_break = breakdown of available mass to burn 2, %
%
% Written by: Joey Hammond

%% SETUP
% Establish arrays and scalar
R2 = linspace(R_max(1),R_max(2),numR2);
m_break = linspace(m_break(1),m_break(2),numMass);
m2 =  m_total;
DV1 = zeros(numR2,numMass);
DV2 = zeros(numR2,numMass);
DT = zeros(numR2,numMass);
m_array = zeros(10,numR2,numMass);
V = zeros(numR2,numMass);
m_stage = SMAP(2,1);
mass_payload = SMAP(1,1);
power_payload = SMAP(1,2);

EP_power = prop_scheme(1,4);
departure_power = sum(SMAP(:,3)) / R1^2;
%% FUTRE WORK - RADIATOR AND SOLAR PANEL ADJUSTMENTS
% FUTURE WORK: Determine solar panels required for EP 
departure_power_req = EP_power + SMAP(2,2);
[~, departure_SP_mass, ~,~] = panel_power(R1,[],departure_power_req);
departure_power = sum(SMAP(:,3)) / R1^2; % Onboard solar panels for departure and on payload
if departure_power_req>departure_power
    disp("BEWARE: Departure power draw exceeds solar panels, and current functionality doesnt add additional solar panels");
    departure_power = departure_power_req  + 0; % change to other value
end

% FUTURE WORK: Determine radiators and heat loads present
departure_radiators = sum(SMAP(:,4));
departure_heat = SMAP(2,5) + prop_scheme(1,9);
if departure_heat>departure_radiators
    disp("WARNING: Departure heat loads exceed radiators onboard, and current functionality doesn't automatically add radiators");
    pause;
end

%% SIZE SYSTEMS
for ii = 1:numR2
    % Determine mass of solar panels on payload
    R2_temp = R2(ii);
    arrival_power = SMAP(1,3) / R2_temp^2;
    %Determine variable mass in system
    %   Option 1: Payload radius design point is smaller than those needed to departure
    if arrival_power > power_payload
        m4 = mass_payload;
        m_available = m2 - m4;
    %   Option 2: Additional panels required for payload design point
    else
       [~,payload_SP_mass,~,~] = panel_power(R2_temp, [], power_payload - arrival_power);
        m4 = payload_SP_mass+mass_payload;
        m_available = m2 - mass_payload - departure_SP_mass;
        disp('WARNING: Additional Solar Panels Required in System')
        pause;
    end
    
    for jj = 1:numMass
        % Determine mass breakdown
        m_break_temp = m_break(jj);
        
        % Check math
        m3 = m4 + m_break_temp*m_available;
        if (m4 > m3) || (m3 > m2)
            error('Mass breakdown error')
        end
        [mass_array,nominal_power,dv1, dv2, dt,v] = ...
            prop_sizing4(m4, m2, m_stage, m_break_temp, departure_power, R1, prop_scheme(1,:), prop_scheme(2,:),preposition_DV);
        
        % Check for unreal, negative, or non-number answers
        if ~isreal(nominal_power) || isnan(nominal_power) || norm(nominal_power) ~= nominal_power
            error('Unreal power area')
        elseif ~isreal(dv1) || isnan(dv1) || norm(dv1) ~= dv1
            error('Unreal DV1')
        elseif ~isreal(dv2) || isnan(dv2) || norm(dv2) ~= dv2
            error('Unreal DV2')
        elseif ~isreal(dt) || isnan(dt) || norm(dt) ~= dt
            error('Unreal burn time')
        end
        
        DV1(ii,jj) = dv1;
        DV2(ii,jj) = dv2;
        DT(ii,jj) = dt;
        V(ii,jj) = v;
        m_array(:,ii,jj) = mass_array;
        
    end
end
end

